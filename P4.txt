1. Aggregate Functions - 
import spark.implicits._

  val simpleData = Seq(("James", "Sales", 3000),
    ("Michael", "Sales", 4600),
    ("Robert", "Sales", 4100),
    ("Maria", "Finance", 3000),
    ("James", "Sales", 3000),
    ("Scott", "Finance", 3300),
    ("Jen", "Finance", 3900),
    ("Jeff", "Marketing", 3000),
    ("Kumar", "Marketing", 2000),
    ("Saif", "Sales", 4100)
  )
  val df = simpleData.toDF("employee_name", "department", "salary")
  df.show()
//approx_count_distinct
println("approx_count_distinct: "+ df.select(approx_count_distinct("salary")).collect()(0)(0))
//avg (average) Aggregate Function
println("avg: "+ df.select(avg("salary")).collect()(0)(0))
//max()
df.select(max("salary")).show(false)
//min()
df.select(min("salary")).show(false)
//mean()
df.select(mean("salary")).show(false)
//sum()
df.select(sum("salary")).show(false)
//


4. Add row number to DataFrame - 
import spark.implicits._

  val simpleData = Seq(("James", "Sales", 3000),
    ("Michael", "Sales", 4600),
    ("Robert", "Sales", 4100),
    ("Maria", "Finance", 3000),
    ("James", "Sales", 3000),
    ("Scott", "Finance", 3300),
    ("Jen", "Finance", 3900),
    ("Jeff", "Marketing", 3000),
    ("Kumar", "Marketing", 2000),
    ("Saif", "Sales", 4100)
  )
  val df = simpleData.toDF("employee_name", "department", "salary")
  df.show()

import org.apache.spark.sql.expressions.Window
val windowSpec  = Window.partitionBy("department").orderBy("salary")
df.withColumn("row_number",row_number.over(windowSpec)).show()
